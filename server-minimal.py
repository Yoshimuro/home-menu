#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ —á–∏—Å—Ç—ã—Ö —Å–æ–∫–µ—Ç–∞—Ö
–î–ª—è python3-light –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import socket
import os
import sys
import signal
import threading
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
HOST = "0.0.0.0"
PORT = 8080
MAX_CONNECTIONS = 10

def simple_url_decode(url):
    """–ü—Ä–æ—Å—Ç–æ–µ URL –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ urllib"""
    # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    url = url.replace('%20', ' ')
    url = url.replace('%21', '!')
    url = url.replace('%22', '"')
    url = url.replace('%23', '#')
    url = url.replace('%24', '$')
    url = url.replace('%25', '%')
    url = url.replace('%26', '&')
    url = url.replace('%27', "'")
    url = url.replace('%28', '(')
    url = url.replace('%29', ')')
    url = url.replace('%2A', '*')
    url = url.replace('%2B', '+')
    url = url.replace('%2C', ',')
    url = url.replace('%2D', '-')
    url = url.replace('%2E', '.')
    url = url.replace('%2F', '/')
    return url

class MinimalHTTPServer:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.running = True
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.socket.bind((self.host, self.port))
            self.socket.listen(MAX_CONNECTIONS)
            print(f"üçΩÔ∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            while self.running:
                try:
                    client_socket, address = self.socket.accept()
                    client_thread = threading.Thread(
                        target=self.handle_client, 
                        args=(client_socket, address)
                    )
                    client_thread.daemon = True
                    client_thread.start()
                except OSError:
                    if self.running:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.socket.close()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = False
        self.socket.close()
    
    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            request = client_socket.recv(1024).decode('utf-8')
            if not request:
                return
            
            # –ü–∞—Ä—Å–∏–º HTTP –∑–∞–ø—Ä–æ—Å
            lines = request.split('\n')
            if not lines:
                return
                
            request_line = lines[0].strip()
            parts = request_line.split()
            if len(parts) < 2:
                return
                
            method = parts[0]
            path = simple_url_decode(parts[1])
             
            print(f"[{time.strftime('%H:%M:%S')}] {method} {path}")
            
            if method == 'GET':
                self.handle_get(client_socket, path)
            else:
                self.send_error(client_socket, 405, "Method Not Allowed")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        finally:
            client_socket.close()
    
    def handle_get(self, client_socket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
        if path == '/' or path == '':
            path = '/index.html'
        
        # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à
        if path.startswith('/'):
            path = path[1:]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if '..' in path or path.startswith('/'):
            self.send_error(client_socket, 403, "Forbidden")
            return
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
        if not os.path.exists(path):
            self.send_error(client_socket, 404, "Not Found")
            return
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type
            content_type = self.get_content_type(path)
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(path, 'rb') as f:
                content = f.read()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response = f"HTTP/1.1 200 OK\r\n"
            response += f"Content-Type: {content_type}\r\n"
            response += f"Content-Length: {len(content)}\r\n"
            response += f"Cache-Control: max-age=3600\r\n"
            response += f"Connection: close\r\n"
            response += f"\r\n"
            
            client_socket.send(response.encode('utf-8'))
            client_socket.send(content)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
            self.send_error(client_socket, 500, "Internal Server Error")
    
    def send_error(self, client_socket, code, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –æ—à–∏–±–∫–∏"""
        try:
            response = f"HTTP/1.1 {code} {message}\r\n"
            response += f"Content-Type: text/html; charset=utf-8\r\n"
            response += f"Connection: close\r\n"
            response += f"\r\n"
            response += f"<h1>{code} {message}</h1>"
            
            client_socket.send(response.encode('utf-8'))
        except:
            pass
    
    def get_content_type(self, path):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞"""
        if path.endswith('.html'):
            return 'text/html; charset=utf-8'
        elif path.endswith('.css'):
            return 'text/css'
        elif path.endswith('.js'):
            return 'application/javascript'
        elif path.endswith('.json'):
            return 'application/json'
        elif path.endswith('.png'):
            return 'image/png'
        elif path.endswith('.jpg') or path.endswith('.jpeg'):
            return 'image/jpeg'
        elif path.endswith('.ico'):
            return 'image/x-icon'
        else:
            return 'application/octet-stream'

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    if 'server' in globals():
        server.stop()
    sys.exit(0)

def parse_simple_args():
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    global HOST, PORT
    
    for i, arg in enumerate(sys.argv):
        if arg == '-p' and i + 1 < len(sys.argv):
            try:
                PORT = int(sys.argv[i + 1])
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç!")
                sys.exit(1)
        elif arg == '-H' and i + 1 < len(sys.argv):
            HOST = sys.argv[i + 1]
        elif arg in ['-h', '--help']:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 server-minimal.py [-p PORT] [-H HOST]")
            print("  -p     –ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8080)")
            print("  -H     IP –∞–¥—Ä–µ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)")
            sys.exit(0)

def main():
    global server
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parse_simple_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    if not os.path.exists('index.html'):
        print("‚ùå –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = MinimalHTTPServer(HOST, PORT)
    
    try:
        server.start()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        server.stop()

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–õ–µ–≥–∫–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –º–µ–Ω—é
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
"""

import http.server
import socketserver
import os
import sys
import argparse
import signal
import threading
import time
from urllib.parse import unquote
import json

class MenuHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –º–µ–Ω—é"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=os.path.dirname(os.path.abspath(__file__)), **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/' or self.path == '/index.html' or self.path == '':
            self.path = '/index.html'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        if self.path.endswith(('.css', '.js', '.png', '.jpg', '.ico')):
            self.send_response(200)
            self.send_header('Cache-Control', 'max-age=3600')  # 1 —á–∞—Å
            if self.path.endswith('.css'):
                self.send_header('Content-Type', 'text/css')
            elif self.path.endswith('.js'):
                self.send_header('Content-Type', 'application/javascript')
            self.end_headers()
            
            try:
                with open(self.path[1:], 'rb') as f:
                    self.wfile.write(f.read())
            except FileNotFoundError:
                self.send_error(404)
            return
        
        super().do_GET()
    
    def log_message(self, format, *args):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
        print(f"[{timestamp}] {format % args}")

class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π TCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    allow_reuse_address = True
    daemon_threads = True

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    sys.exit(0)

def check_memory_usage():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
    try:
        with open('/proc/meminfo', 'r') as f:
            meminfo = f.read()
            for line in meminfo.split('\n'):
                if 'MemAvailable:' in line:
                    available = int(line.split()[1])
                    if available < 10000:  # –ú–µ–Ω—å—à–µ 10MB
                        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ ({available/1024:.1f}MB)")
                    break
    except:
        pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

def get_local_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
    import socket
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except:
        return "127.0.0.1"

def main():
    parser = argparse.ArgumentParser(description='–°–µ—Ä–≤–µ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –º–µ–Ω—é –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞')
    parser.add_argument('-p', '--port', type=int, default=8080, 
                       help='–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8080)')
    parser.add_argument('-H', '--host', default='0.0.0.0',
                       help='IP –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)')
    parser.add_argument('--monitor', action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ index.html
    if not os.path.exists('index.html'):
        print("‚ùå –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ –ø–∞–ø–∫–∏ router-deployment")
        sys.exit(1)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        with ThreadedTCPServer((args.host, args.port), MenuHTTPRequestHandler) as httpd:
            local_ip = get_local_ip()
            
            print("üçΩÔ∏è  –°–µ—Ä–≤–µ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω!")
            print(f"üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://{local_ip}:{args.port}")
            print(f"üåê –°–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å: http://{args.host}:{args.port}")
            print("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤")
            print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("-" * 50)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            if args.monitor:
                def memory_monitor():
                    while True:
                        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                        check_memory_usage()
                
                monitor_thread = threading.Thread(target=memory_monitor, daemon=True)
                monitor_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            httpd.serve_forever()
            
    except OSError as e:
        if e.errno == 98:  # Address already in use
            print(f"‚ùå –ü–æ—Ä—Ç {args.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: python3 server.py -p 8081")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 